#!/usr/bin/env python3
"""
Script de test pour v√©rifier le fonctionnement du processeur avec embeddings locaux.
"""

import os
import sys
from pathlib import Path

# Charger les variables d'environnement depuis .env
try:
    from dotenv import load_dotenv
    load_dotenv()  # Charge le fichier .env
    print("‚úÖ Fichier .env charg√©")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv non install√©, utilisation des variables d'environnement syst√®me")

# Ajouter le r√©pertoire courant au path
sys.path.append(str(Path(__file__).parent))

def test_imports():
    """Test des imports n√©cessaires."""
    print("üîç Test des imports...")
    
    try:
        from main import MarkdownDocumentProcessorLocal
        print("‚úÖ Import de MarkdownDocumentProcessorLocal r√©ussi")
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    
    return True

def test_file_existence():
    """Test de l'existence du fichier source."""
    print("\nüìÅ Test de l'existence du fichier source...")
    
    markdown_file = Path("../sources/droitadminSmall.md")
    if markdown_file.exists():
        print(f"‚úÖ Fichier trouv√©: {markdown_file}")
        print(f"   Taille: {markdown_file.stat().st_size} bytes")
        return True
    else:
        print(f"‚ùå Fichier non trouv√©: {markdown_file}")
        return False

def test_processor_initialization():
    """Test de l'initialisation du processeur."""
    print("\nüèóÔ∏è Test de l'initialisation du processeur...")
    
    try:
        from main import MarkdownDocumentProcessorLocal
        
        processor = MarkdownDocumentProcessorLocal(
            markdown_file_path="../sources/droitadminSmall.md",
            storage_dir="./test_storage_local"
        )
        print("‚úÖ Processeur local initialis√© avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur d'initialisation: {e}")
        return False

def test_markdown_parsing():
    """Test du parsing du Markdown."""
    print("\nüìÑ Test du parsing Markdown...")
    
    try:
        from main import MarkdownDocumentProcessorLocal
        
        processor = MarkdownDocumentProcessorLocal(
            markdown_file_path="../sources/droitadminSmall.md",
            storage_dir="./test_storage_local"
        )
        
        documents = processor.load_and_parse_markdown()
        print(f"‚úÖ Parsing r√©ussi: {len(documents)} sections trouv√©es")
        
        # Afficher quelques exemples
        for i, doc in enumerate(documents[:3]):
            title = doc.metadata.get('title', 'Sans titre')
            level = doc.metadata.get('level', 0)
            print(f"   Section {i+1}: {title} (niveau {level})")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur de parsing: {e}")
        return False

def test_local_embeddings():
    """Test des embeddings locaux."""
    print("\nüß† Test des embeddings locaux...")
    
    try:
        from llama_index.embeddings.huggingface import HuggingFaceEmbedding
        
        # Tester l'initialisation des embeddings
        embed_model = HuggingFaceEmbedding(
            model_name="sentence-transformers/distiluse-base-multilingual-cased",
            device="cpu"  # Utiliser CPU pour le test
        )
        
        # Test simple d'embedding
        test_text = "Test d'embedding avec mod√®le local"
        embedding = embed_model.get_text_embedding(test_text)
        
        print(f"‚úÖ Embeddings locaux fonctionnels")
        print(f"   Dimension: {len(embedding)}")
        print(f"   Premi√®res valeurs: {embedding[:5]}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur avec les embeddings locaux: {e}")
        return False

def test_gpu_availability():
    """Test de la disponibilit√© du GPU."""
    print("\nüñ•Ô∏è Test de la disponibilit√© du GPU...")
    
    try:
        import torch
        
        if torch.cuda.is_available():
            print(f"‚úÖ GPU d√©tect√©: {torch.cuda.get_device_name(0)}")
            print(f"   VRAM disponible: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
            return True
        else:
            print("‚ö†Ô∏è  Aucun GPU d√©tect√©, utilisation du CPU")
            return True  # Ce n'est pas une erreur, juste un avertissement
    except ImportError:
        print("‚ö†Ô∏è  PyTorch non install√©")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification GPU: {e}")
        return False

def test_model_download():
    """Test du t√©l√©chargement du mod√®le."""
    print("\nüì• Test du t√©l√©chargement du mod√®le...")
    
    try:
        from sentence_transformers import SentenceTransformer
        
        # Tester le t√©l√©chargement du mod√®le
        model = SentenceTransformer("sentence-transformers/distiluse-base-multilingual-cased")
        
        # Test simple
        test_texts = ["Test en fran√ßais", "Test in English"]
        embeddings = model.encode(test_texts)
        
        print(f"‚úÖ Mod√®le t√©l√©charg√© et fonctionnel")
        print(f"   Dimension des embeddings: {embeddings.shape[1]}")
        print(f"   Nombre de textes test√©s: {len(test_texts)}")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du t√©l√©chargement du mod√®le: {e}")
        return False

def main():
    """Fonction principale de test."""
    print("üß™ TESTS DU PROCESSEUR LOCAL (DISTILUSE)")
    print("=" * 60)
    
    tests = [
        ("Imports", test_imports),
        ("Fichier source", test_file_existence),
        ("Initialisation", test_processor_initialization),
        ("Parsing Markdown", test_markdown_parsing),
        ("Embeddings locaux", test_local_embeddings),
        ("Disponibilit√© GPU", test_gpu_availability),
        ("T√©l√©chargement mod√®le", test_model_download)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s! Le script local est pr√™t √† √™tre utilis√©.")
        print("\nüí° Avantages de la version locale:")
        print("   ‚úÖ Gratuit (pas de co√ªts d'API)")
        print("   ‚úÖ Sans limites (pas de rate limits)")
        print("   ‚úÖ Rapide (pas de latence r√©seau)")
        print("   ‚úÖ Priv√© (donn√©es restent locales)")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
